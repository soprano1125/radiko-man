#!/usr/bin/perl --

use strict;
use Config::Simple;
use File::Spec;
use File::Path;
use LWP::UserAgent;
use MIME::Base64;

if (@ARGV != 1){
	print "usage: " . __FILE__ . " APP_VERSION\n";
	exit 1;
}

###############################################
# set Module
###############################################
my ($ua, $res, $cfg);

###############################################
# set Value
###############################################
my $APP_VERSION = $ARGV[0];

my $home_path = File::Spec->rel2abs();
$home_path =~ s/__FILE__//g;
my $prog_path = "$home_path";

$cfg = new Config::Simple("$prog_path/radiko.ini")->vars();

my $temp_path = "share/temp";
my $cookie_file = "$home_path/$temp_path/". $cfg->{'premium.cookie_file'};
my $auth_key = "$home_path/$temp_path/". $cfg->{'premium.auth_key'};
my $user_status = "$home_path/$temp_path/". $cfg->{'premium.user_status'};
my $area_file = "$home_path/$temp_path/". $cfg->{'common.area_file'};
my $ifs = $cfg->{'common.ifs'};

my $api_url = $cfg->{'common.api_url'};
my $timeout = $cfg->{'common.http_timeout'};
my $user_agent = `$prog_path/common/makeUserAgent radiko.jp $cfg->{'common.player_ver'}`;

my $player_url = $cfg->{'common.player_url'};
my $player_file = "$home_path/$temp_path/player.swf";
my $keyfile = "$home_path/$temp_path/authkey.bin";

my $ERROR;

mkpath("$home_path/$temp_path");

###############################################
# init LWP 
###############################################
$ua = LWP::UserAgent->new;
if (-f $cookie_file) {
	$ua->cookie_jar({file => "$cookie_file", autosave => 1});
}

$ua->timeout($timeout);
$ua->agent($user_agent);
$ua->default_header("pragma"               => "no-cache");
$ua->default_header("X-Radiko-App-Version" => "$APP_VERSION");
$ua->default_header("X-Radiko-User"        => "test-stream");
$ua->default_header("X-Radiko-Device"      => "pc");

###############################################
# get Player
###############################################
$res = $ua->get($player_url);
if (!$res->is_success) {
	print STDERR $player_url . "\n*******************************\n";
	print STDERR $res->headers->as_string . "\n*******************************\n";
	print STDERR $res->content . "\n*******************************\n";

	$ERROR = "failed getPlayer process.";
	print "$ERROR\n";
	exit 1;
}
if (! -f "$player_file" || -z "$player_file") {
	open(OUT, "> $player_file");
	print(OUT $res->content);
	close(OUT);
}

###############################################
# get KeyData
###############################################
my ($pattern, $BINARY_ID);
$pattern = '\[-b\] 10 Binarys: ID\(s\) (\d+)-(\d+)\n';

$BINARY_ID = `swfextract $player_file | grep Binarys`;
$BINARY_ID =~ s/$pattern/$2/g;
$BINARY_ID =~ s/ //g;
#$BINARY_ID = 1;
`swfextract -b $BINARY_ID $player_file -o $keyfile`;
if (! -f $keyfile) {
	$ERROR = "failed get keydata[swfextract].";
	print "$ERROR";
	exit 1;
}

$ua->default_header("X-Radiko-App"         => 'pc_html5');

###############################################
# get Token
###############################################
$res = $ua->post($api_url . '/auth1_fms', {"" => '\r\n'});
if (!$res->is_success) {
	print STDERR $api_url . '/auth1_fms' . "\n*******************************\n";
	print STDERR $res->headers->as_string . "\n*******************************\n";
	print STDERR $res->content . "\n*******************************\n";

	$ERROR = "failed auth1 process.";
	print "$ERROR\n";
	exit 1;
}

my ($authtoken, $offset, $length, $partialkey);
$authtoken = $res->header("x-radiko-authtoken");
$offset = $res->header("x-radiko-keyoffset");
$length = $res->header("x-radiko-keylength");

open(my $fh, $keyfile) || die "can't open $keyfile";
seek($fh, $offset, 0);
read($fh, my $binary_data, $length);
$partialkey = encode_base64($binary_data);
close($fh);
$partialkey =~ s/\n//g;

##################################
# get auth2_fms
##################################
$ua->default_header("X-Radiko-Authtoken"   => "$authtoken");
$ua->default_header("X-Radiko-Partialkey"  => "$partialkey");
$res = $ua->post($api_url . '/auth2_fms', {"" => '\r\n'});
if (!$res->is_success) {
	print STDERR $api_url . '/auth2_fms' . "\n*******************************\n";
	print STDERR $res->headers->as_string . "\n*******************************\n";
	print STDERR $res->content . "\n*******************************\n";

	$ERROR = "failed auth2 process.";
	print "$ERROR\n";
	exit 1;
}

for my $line(split(/\n/, $res->content)) {
	if($line =~ /([^,]+),([^,]+),([^,]+)/){
		$line =~ s/\r//;
		open(OUT, "> $area_file");
		print(OUT $line);
		close(OUT);
		last;
	}
}

###############################################
# save Token
###############################################
open(IN, "$user_status");
my $auth_status = <IN>;
$auth_status =~ s/\s+//;
$auth_status =~ s/\r//;
$auth_status =~ s/\n//;
close(IN);

open(OUT, "> $auth_key");
print(OUT "$authtoken$ifs$partialkey$ifs$auth_status");
close(OUT);

unlink($keyfile, $user_status, $player_file);

print "authentication success.";
exit 0;

